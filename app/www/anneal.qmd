---
title: "Annealing"
format:
  html:
    self-contained: true
    code-fold: true
    standalone: true
params:
  session_dir: "session-default"
  inputFile: "clusters.rds"
  taxaFile: "taxa.rds"
  minMaxFile: "minmax.rds"
  outputFile: "anneal.rds"
  seed: 0
  selected_cluster: 1
  niter: 500
---

```{r echo=FALSE, results='asis'}
library(glue)
cat(glue("
- **Selected Cluster**: `{params$selected_cluster}`  
- **Niter**: `{params$niter}`  
- **Seed**: `{params$seed}`  
"))
```

```{R}
#| label: helper functions
#| code-summary: Load libraries, data
#| warning: false
#| message: false
#| echo: false

library(glue)
library(networkD3)
library(dplyr)
library(pander)

# Load input cluster and taxa matrices
input_data <- readRDS(file.path(params$session_dir, params$inputFile))
taxa <- readRDS(file.path(params$session_dir, params$taxaFile))

# Clean up taxa matrix if needed

# === remove numeric rownames set by readRDS
if (all(grepl("^[0-9]+$", rownames(taxa)))) {
  warning("dropping unneeded numeric index")
  # Set the first column as row names
  rownames(taxa) <- taxa[[1]]
  
  # Remove the first column
  taxa <- taxa[, -1] 
}

# === drop any all-zero columns
original_colnames <- colnames(taxa)

# do the subset
taxa <- taxa[, colSums(taxa) != 0]

# Find the column names that were dropped
dropped_colnames <- setdiff(original_colnames, colnames(taxa))

# Print a message if any columns were dropped
if (length(dropped_colnames) > 0) {
  cat(
    length(dropped_colnames), 
    "F-matrix columns dropped because they contained only zeros:\n"
    )
  cat(paste(dropped_colnames, collapse = ", "), "\n")
}

# Prepare S matrix

if ("cluster.list" %in% names(input_data)) {
  # Using clustered data
  if (params$selected_cluster > length(input_data$cluster.list)) {
    stop("selected cluster is greater than number of clusters")
  }
  selectedCluster <- input_data$cluster.list[[params$selected_cluster]]
  selectedCluster$Clust <- NULL
} else {
  # Using raw pigment matrix directly
  selectedCluster <- input_data
}

# Restore sample names as rownames if present

if (is.character(selectedCluster[[1]]) && !anyDuplicated(selectedCluster[[1]])) {
  rownames(selectedCluster) <- selectedCluster[[1]]
  selectedCluster <- selectedCluster[, -1, drop = FALSE]
}
# Find mismatches between F and S

# TODO: also check this for the min_max matrix
# Assume taxa and selectedCluster are the two matrices
headers1 <- colnames(taxa)
headers2 <- colnames(selectedCluster)

# Find headers in taxa that are not in selectedCluster
only_in_mtx1 <- setdiff(headers1, headers2)

# Find headers in selectedCluster that are not in taxa
only_in_mtx2 <- setdiff(headers2, headers1)

# Find headers common to both matrices
common_headers <- intersect(headers1, headers2)

# Print the results
if (! length(common_headers) > 0){
  cat(
    "Headers only in taxa:\n", 
    paste(only_in_mtx1, collapse = ", "), 
    "\n"
  )
  cat(
    "Headers only in selectedCluster:\n", 
    paste(only_in_mtx2, collapse = ", "), 
    "\n"
  )
  cat(
    "Headers common to both matrices:\n", 
    paste(common_headers, collapse = ", "), 
    "\n"
  )
  stop("ERR: S and F matrix have different columns.")
}

# Load min-max table (custom or default)

# Start with the default min-max table from the phytoclass package
min_max_table <- phytoclass::min_max

# Construct full path to the custom min-max file (if uploaded by user)
minmax_path <- file.path(params$session_dir, params$minMaxFile)

# If a custom file exists, try to load and validate it
if (file.exists(minmax_path)) {
  custom_minmax <- readRDS(minmax_path)

  # Standardize column names for comparison
  colnames_clean <- tolower(trimws(colnames(custom_minmax)))

  # Try to detect required columns regardless of naming variations
  class_col   <- which(colnames_clean %in% c("class", "taxa"))
  pigment_col <- which(colnames_clean %in% c("pigment", "pig_abbrev", "pig"))
  min_col     <- which(colnames_clean %in% c("min", "minimum"))
  max_col     <- which(colnames_clean %in% c("max", "maximum"))

  # Ensure exactly one column for each required field is found
  if (length(class_col) == 1 && length(pigment_col) == 1 &&
      length(min_col) == 1 && length(max_col) == 1) {
    
    # Reconstruct min-max table using standardized column names
    min_max_table <- data.frame(
      class   = as.character(custom_minmax[[class_col]]),
      pigment = as.character(custom_minmax[[pigment_col]]),
      min     = as.numeric(custom_minmax[[min_col]]),
      max     = as.numeric(custom_minmax[[max_col]]),
      stringsAsFactors = FALSE
    )

    cat("Using custom min-max values from file\n")
  } else {
    # If required columns are not correctly found, fallback to default
    cat("Custom min-max file missing required columns (class/taxa, pigment, min, max). Using defaults.\n")
  }
}

```

```{R}
#| label: run-annealing
#| code-summary: Run simulated annealing

set.seed(params$seed)

Results <- phytoclass::simulated_annealing(
  S = selectedCluster,
  Fmat = taxa,
  niter = params$niter,
  user_defined_min_max = min_max_table,
  verbose = FALSE
)

# show-figure
print(Results$Figure)
```

```{R}
#| label: convergence plot
#| code-summary: Display convergence plot
Results$converge_plot
```

```{R}
#| label: sankey-diagram
#| code-summary: Sankey diagram of pigment flow into phytoplankton groups

# Aggregate pigment totals across samples
pigment_totals <- colSums(selectedCluster)

# Multiply by F matrix to allocate to classes
F <- Results$`F matrix`
common_pigments <- intersect(names(pigment_totals), colnames(F))

if (length(common_pigments) == 0) {
  stop("No common pigments found between S and F matrix")
}

# Slice relevant portions
pigment_totals <- pigment_totals[common_pigments]
F <- F[, common_pigments, drop=FALSE]

# Compute pigment contribution to each phyto class
flow_matrix <- as.matrix(F) %*% diag(pigment_totals)
colnames(flow_matrix) <- names(pigment_totals)
flow_df <- as.data.frame(flow_matrix)
flow_df$class <- rownames(F)

# Convert wide to long format: pigment -> class, weight = value
sankey_data <- flow_df |>
  tidyr::pivot_longer(
    -class, 
    names_to = "pigment", 
    values_to = "value"
  ) |>
  filter(value > 0)

# Create node and link structure
nodes <- unique(c(sankey_data$pigment, sankey_data$class))
node_df <- data.frame(name = nodes)

sankey_data$source <- match(sankey_data$pigment, node_df$name) - 1
sankey_data$target <- match(sankey_data$class, node_df$name) - 1

# Render
sankeyNetwork(
  Links = sankey_data[, c("source", "target", "value")],
  Nodes = node_df,
  Source = "source",
  Target = "target",
  Value = "value",
  NodeID = "name",
  fontSize = 12,
  nodeWidth = 30,
  sinksRight = FALSE
)
```

```{R}
#| code-label: Show results

print(glue("
 completed w/ RMSE {Results$RMSE}
"))

print("Mean Absolute Error (MAE):")
print(Results$MAE)
# 
print("F matrix:")
print(Results$`F matrix`)

pander(Results$`Class abundances`, digits = 6)
```

```{R}
#| label: download-estimate
#| code-summary: Prepare taxa estimate csv 
#| echo: false

output_csv_path <- file.path(params$session_dir, "taxa_estimates.csv")
write.csv(Results$`Class abundances`, file = output_csv_path, row.names = TRUE)
```

```{R}
#| label: download-fmatrix
#| code-summary: Prepare output F matrix for download
#| echo: false

fmatrix_csv_path <- file.path(params$session_dir, "fmatrix.csv")
write.csv(Results$`F matrix`, file = fmatrix_csv_path, row.names = TRUE)
```

```{R}
#| label: download-MAE
#| code-summary: Prepare output MAE for download
#| echo: false

MAE_csv_path <- file.path(params$session_dir, "MAE.csv")
write.csv(Results$MAE, file = MAE_csv_path, row.names = TRUE)
```
