---
title: "Cluster"
format:
  html:
    self-contained: true
    code-fold: true
    standalone: true
params:
  session_dir: "session-default"
  inputFile: "pigments.rds"
  outputFile: "clusters.rds"
  minSamplesPerCluster: 20
---

```{r echo=FALSE, results='asis'}

library(glue)
cat(glue("
- **Input File**: `{params$inputFile}`  
- **Output File**: `{params$outputFile}`  
- **Min samples per cluster**: `{params$minSamplesPerCluster}`  
"))
```

```{R}
#| label: helper functions
#| code-summary: Load required libraries
#| echo: false

suppressPackageStartupMessages({
  library(glue)
  library(ggdendro)
  library(ggplot2)
  library(plotly)
})
```

```{R}
#| label: load data
#| code-summary: Load Input dataset 

pigment_df <- readRDS(file.path(params$session_dir, params$inputFile))
# TODO: validate

# Set first column as row names if it contains sample names

# Update the status based on the length of the data frame
print(paste("Data loaded, length:", nrow(pigment_df)))
```

```{R}
#| label: clustering
#| code-summary: Run clustering

result <- phytoclass::Cluster(
  pigment_df,
  params$minSamplesPerCluster
)
```

```{R}
#| label: save-results
#| code-summary: Save cluster result to file

fname <- file.path(params$session_dir, params$outputFile)
saveRDS(result, file=fname)
print(glue("cluster result saved to file {fname} on the server."))
```

```{R}
#| label: cluster-plot
#| code-summary: Visualize the clustering result

plot(result$cluster.plot)
```

```{R}
#| label: cluster-count
#| code-summary: Total clusters found

print(length(result$cluster.list))
```

```{R}
#| label: cluster-table
#| code-summary: Show sample membership for clusters

head(result$cluster.list[[1]])
```

